version: '3'
services:
  catalogdb:
    image: mongo:latest
    container_name: catalogdb
    restart: always
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    volumes:
      - mongodb-data:/data/db
    # Optional: Uncomment the lines below if you have initialization scripts
    # volumes:
    #   - ./init-scripts:/docker-entrypoint-initdb.d
    # Optional: Uncomment the lines below if you have a custom entrypoint script
    # command: ["--auth"]

  basketdb:
    image: redis:latest
    container_name: basketdb
    restart: always
    ports:
      - '6379:6379'

  discountdb:
    image: postgres:latest
    container_name: discountdb
    restart: always
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: discountdb
    volumes:
      - postgres-data:/var/lib/postgresql/data

  orderdb:
    image: mcr.microsoft.com/mssql/server
    container_name: orderdb
    restart: always
    ports:
      - '1433:1433'
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: SwN12345678
      MSSQL_ENCRYPT: false # Disable SSL
    volumes:
      - mssql-data:/var/opt/mssql

  catalog.api:
    image: ${DOCKER_REGISTRY-}catalogapi
    container_name: catalog.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - 'DatabaseSettings:ConnectionString=mongodb://admin:admin@catalogdb:27017'
    build:
      context: .
      dockerfile: Services/Catalog/Catalog.API/Dockerfile
    ports:
      - '8000:80'
    depends_on:
      - catalogdb

  basket.api:
    image: ${DOCKER_REGISTRY-}basketapi
    container_name: basket.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - 'ConnectionStrings:RedisConnection=basketdb:6379'
      - 'GrpcSettings:DiscountUrl=http://discount.grpc'
      - 'EventBusSettings:HostAddress=amqp://admin:admin@rabbitmq:5672'
    build:
      context: .
      dockerfile: Services/Basket/Basket.API/Dockerfile
    ports:
      - '8001:80'
    depends_on:
      - basketdb
      - rabbitmq

  discount.api:
    image: ${DOCKER_REGISTRY-}discountapi
    container_name: discount.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - 'DatabaseSettings:ConnectionString=Server=discountdb;port=5432;database=discountdb;username=admin;password=admin'
    build:
      context: .
      dockerfile: Services/Discount/Discount.API/Dockerfile
    ports:
      - '8002:80'
    depends_on:
      - discountdb

  discount.grpc:
    image: ${DOCKER_REGISTRY-}discountgrpc
    container_name: discount.grpc
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - 'DatabaseSettings:ConnectionString=Server=discountdb;port=5432;database=discountdb;username=admin;password=admin'
    build:
      context: .
      dockerfile: Services/Discount/Discount.Grpc/Dockerfile
    ports:
      - '8003:80'
    depends_on:
      - discountdb

  ordering.api:
    image: ${DOCKER_REGISTRY-}orderingapi
    container_name: ordering.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - 'EventBusSettings:HostAddress=amqp://admin:admin@rabbitmq:5672'
      #- 'ConnectionStrings:OrderingConnectionString=Server=orderdb, 1433;Database=OrderDb;User Id=sa;Password=SwN12345678;TrustServerCertificate=True;'
    build:
      context: .
      dockerfile: Services/Ordering/Ordering.API/Dockerfile
    ports:
      - '8004:80'
    depends_on:
      - orderdb
      - rabbitmq

  ocelotapigw:
    image: ${DOCKER_REGISTRY-}ocelotapigw
    container_name: ocelotapigw
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    build:
      context: .
      dockerfile: APIGateways/OcelotApiGw/Dockerfile
    ports:
      - '8010:80'
    depends_on:
      - catalog.api
      - basket.api
      - discount.api
      - ordering.api

  shopping.aggregator:
    image: ${DOCKER_REGISTRY-}shoppingaggregator
    container_name: shopping.aggregator
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - 'ApiSettings:CatalogUrl=http://catalog.api'
      - 'ApiSettings:BasketUrl=http://basket.api'
      - 'ApiSettings:OrderingUrl=http://ordering.api'
    build:
      context: .
      dockerfile: APIGateways/Shopping.Aggregator/Dockerfile
    ports:
      - '8005:80'
    depends_on:
      - catalog.api
      - basket.api
      - ordering.api
  aspnetrun:
    image: ${DOCKER_REGISTRY-}aspnetrun
    container_name: aspnetrun
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "ApiSettings:GatewayAddress=http://ocelotapigw"
    build:
      context: .
      dockerfile: WebApps/Aspnetrun/Dockerfile
    ports:
      - '8006:80'
    depends_on:
    - ocelotapigw
    - catalog.api
    - basket.api
    - discount.api
    - ordering.api

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: always
    ports:
      - '5672:5672' # RabbitMQ default port
      - '15672:15672' # RabbitMQ management UI port
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin

  mongoclient:
    image: mongoclient/mongoclient
    container_name: mongoclient
    environment:
      MONGOCLIENT_DEFAULT_CONNECTION_URL: mongodb://admin:admin@catalogdb:27017
    ports:
      - '3100:3000'
    depends_on:
      - catalogdb

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - '5050:80'
    depends_on:
      - discountdb
    volumes:
      - pgadmin-data:/var/lib/pgadmin

volumes:
  mongodb-data:
  postgres-data:
  pgadmin-data:
  mssql-data:
